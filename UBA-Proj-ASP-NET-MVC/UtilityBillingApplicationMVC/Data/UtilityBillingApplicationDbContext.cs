// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using UtilityBillingApplicationMVC.Models;

namespace UtilityBillingApplicationMVC.Data;

public partial class UtilityBillingApplicationDbContext : DbContext
{
    public UtilityBillingApplicationDbContext(DbContextOptions<UtilityBillingApplicationDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Addresses> Addresses { get; set; }

    public virtual DbSet<ApplicationStatuses> ApplicationStatuses { get; set; }

    public virtual DbSet<BillHistories> BillHistories { get; set; }

    public virtual DbSet<MeterInfos> MeterInfos { get; set; }

    public virtual DbSet<Payments> Payments { get; set; }

    public virtual DbSet<Tickets> Tickets { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    public virtual DbSet<UsersRoles> UsersRoles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Addresses>(entity =>
        {
            entity.HasIndex(e => e.UserId, "IX_Addresses_UserId");

            entity.HasOne(d => d.User).WithMany(p => p.Addresses).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<ApplicationStatuses>(entity =>
        {
            entity.HasKey(e => e.ApplicationStatusId);

            entity.HasIndex(e => e.UserId, "IX_ApplicationStatuses_UserId");

            entity.HasOne(d => d.User).WithMany(p => p.ApplicationStatuses)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<BillHistories>(entity =>
        {
            entity.HasKey(e => e.BillId);

            entity.HasIndex(e => e.MeterId, "IX_BillHistories_MeterId");

            entity.HasIndex(e => e.UserId, "IX_BillHistories_UserId");

            entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MeterReading).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Meter).WithMany(p => p.BillHistories).HasForeignKey(d => d.MeterId);

            entity.HasOne(d => d.User).WithMany(p => p.BillHistories)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<MeterInfos>(entity =>
        {
            entity.HasKey(e => e.MeterId);

            entity.HasIndex(e => e.ApplicationStatusId, "IX_MeterInfos_ApplicationStatusId");

            entity.HasIndex(e => e.UserId, "IX_MeterInfos_UserId");

            entity.HasOne(d => d.ApplicationStatus).WithMany(p => p.MeterInfos)
                .HasForeignKey(d => d.ApplicationStatusId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.User).WithMany(p => p.MeterInfos)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Payments>(entity =>
        {
            entity.HasKey(e => e.PaymentId);

            entity.HasIndex(e => e.BillId, "IX_Payments_BillId");

            entity.HasIndex(e => e.UserId, "IX_Payments_UserId");

            entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Bill).WithMany(p => p.Payments).HasForeignKey(d => d.BillId);

            entity.HasOne(d => d.User).WithMany(p => p.Payments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Tickets>(entity =>
        {
            entity.HasKey(e => e.TicketId);

            entity.HasIndex(e => e.UserId, "IX_Tickets_UserId");

            entity.HasOne(d => d.User).WithMany(p => p.Tickets).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<UsersRoles>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.Property(e => e.UserId).ValueGeneratedNever();

            entity.HasOne(d => d.User).WithOne(p => p.UsersRoles).HasForeignKey<UsersRoles>(d => d.UserId);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}